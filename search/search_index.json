{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+","tags":false},"docs":[{"location":"","text":"<p>New code should be created on forks/feature branches and committed to <code>main</code> for testing.</p> <p>once happy <code>main</code> is stable a PR to <code>alpha</code> should be made to start finalising a build for public consumption.</p>","title":"Development Process"},{"location":"#branch-rules","text":"<ul> <li><code>main</code> Development is done on main via forks and PR's</li> <li><code>dev</code> Dont play here, unless you are going to PLAY</li> <li><code>alpha</code> Can diverge from <code>main</code> to hide not ready features, PUSH's are OK, backport to <code>main</code>.</li> <li><code>beta</code> Only PR's from <code>alpha</code> are allowed, no direct changes allowed here.</li> <li><code>rc</code> Release candidates, Can diverge from <code>beta</code> within scope, BugFixes only.</li> <li><code>release-*</code> Perm branch for releases, no edits allowed.</li> </ul>","title":"Branch Rules"},{"location":"#services","text":"<ul> <li>FileService</li> <li>WalletService</li> </ul>","title":"Services"},{"location":"#submodules","text":"<ul> <li>Blockchain</li> <li>Clientside Service</li> <li>GUI App</li> <li>Translations</li> <li>Config Templates</li> </ul>","title":"Submodules"},{"location":"chain/","text":"","title":"Compiling Lethean from Source"},{"location":"chain/#building-portable-statically-linked-binaries","text":"<p>By default, in either dynamically or statically linked builds, binaries target the specific host processor on which the build happens and are not portable to other processors. Portable binaries can be built using the following targets:</p> <ul> <li><code>make release-static-64</code> builds binaries on Linux on x86_64 portable across POSIX systems on x86_64 processors</li> <li><code>make release-static-32</code> builds binaries on Linux on x86_64 or i686 portable across POSIX systems on i686 processors</li> <li><code>make release-static-armv8</code> builds binaries on Linux portable across POSIX systems on armv8 processors</li> <li><code>make release-static-armv7</code> builds binaries on Linux portable across POSIX systems on armv7 processors</li> <li><code>make release-static-armv6</code> builds binaries on Linux portable across POSIX systems on armv6 processors</li> <li><code>make release-static-win64</code> builds binaries on 64-bit Windows portable across 64-bit Windows systems</li> <li><code>make release-static-win32</code> builds binaries on 64-bit or 32-bit Windows portable across 32-bit Windows systems</li> </ul>","title":"Building Portable Statically Linked Binaries"},{"location":"chain/#dependencies","text":"<p>The following table summarizes the tools and libraries required to build.  A few of the libraries are also included in this repository (marked as \"Vendored\"). By default, the build uses the library installed on the system, and ignores the vendored sources. However, if no library is found installed on the system, then the vendored source will be built and used. The vendored sources are also used for statically-linked builds because distribution packages often include only shared library binaries (<code>.so</code>) but not static library archives (<code>.a</code>).</p>    Dep Min. Version Vendored Debian/Ubuntu Pkg Arch Pkg Optional Purpose     GCC 4.7.3 NO <code>build-essential</code> <code>base-devel</code> NO    CMake 3.0.0 NO <code>cmake</code> <code>cmake</code> NO    pkg-config any NO <code>pkg-config</code> <code>base-devel</code> NO    Boost 1.58 NO <code>libboost-all-dev</code> <code>boost</code> NO C++ libraries   OpenSSL basically any NO <code>libssl-dev</code> <code>openssl</code> NO sha256 sum   libunbound 1.4.16 YES <code>libunbound-dev</code> <code>unbound</code> NO DNS resolver   libminiupnpc 2.0 YES <code>libminiupnpc-dev</code> <code>miniupnpc</code> YES NAT punching   libunwind any NO <code>libunwind8-dev</code> <code>libunwind</code> YES Stack traces   liblzma any NO <code>liblzma-dev</code> <code>xz</code> YES For libunwind   ldns 1.6.17 NO <code>libldns-dev</code> <code>ldns</code> YES SSL toolkit   expat 1.1 NO <code>libexpat1-dev</code> <code>expat</code> YES XML parsing   GTest 1.5 YES <code>libgtest-dev</code>^ <code>gtest</code> YES Test suite   Doxygen any NO <code>doxygen</code> <code>doxygen</code> YES Documentation   Graphviz any NO <code>graphviz</code> <code>graphviz</code> YES Documentation    <p>[^] On Debian/Ubuntu <code>libgtest-dev</code> only includes sources and headers. You must build the library binary manually. This can be done with the following command <code>sudo apt-get install libgtest-dev &amp;&amp; cd /usr/src/gtest &amp;&amp; sudo cmake . &amp;&amp; sudo make &amp;&amp; sudo mv libg* /usr/lib/</code></p>","title":"Dependencies"},{"location":"chain/build/","text":"<ul> <li>Install the dependencies</li> </ul> <p>Ubuntu Dependencies  Bash<pre><code>apt install -y build-essential cmake pkg-config libboost-all-dev libssl-dev libzmq3-dev \\\nlibunbound-dev libsodium-dev libunwind8-dev liblzma-dev libreadline6-dev \\\nlibldns-dev libexpat1-dev doxygen graphviz libpgm-dev qttools5-dev-tools \\\nlibhidapi-dev libusb-1.0-0-dev libprotobuf-dev protobuf-compiler libudev-dev \\\nca-certificates git\n</code></pre></p> <ul> <li> <p>Change to the root of the source code directory and build:</p> Text Only<pre><code>cd lethean\nmake\n</code></pre> <p>Optional: If your machine has several cores and enough memory, enable parallel build by running <code>make -j&lt;number of threads&gt;</code> instead of <code>make</code>. For this to be worthwhile, the machine should have one core and about 2GB of RAM available per thread.</p> </li> <li> <p>The resulting executables can be found in <code>build/release/bin</code></p> </li> <li> <p>Add <code>PATH=\"$PATH:$HOME/lethean/build/release/bin\"</code> to <code>.profile</code></p> </li> <li> <p>Run Lethean with <code>letheand --detach</code></p> </li> <li> <p>Optional: build and run the test suite to verify the binaries:</p> Text Only<pre><code>make release-test\n</code></pre> <p>NOTE: <code>coretests</code> test may take a few hours to complete.</p> </li> <li> <p>Optional: to build binaries suitable for debugging:</p> Text Only<pre><code> make debug\n</code></pre> </li> <li> <p>Optional: to build statically-linked binaries:</p> Text Only<pre><code> make release-static\n</code></pre> </li> <li> <p>Optional: build documentation in <code>doc/html</code> (omit <code>HAVE_DOT=YES</code> if <code>graphviz</code> is not installed):</p> Text Only<pre><code>HAVE_DOT=YES doxygen Doxyfile\n</code></pre> </li> </ul>","title":"Linux and OS X"},{"location":"chain/build/android/","text":"Text Only<pre><code>    # Build image (select android64.Dockerfile for aarch64)\n    cd utils/build_scripts/ &amp;&amp; docker build -f android32.Dockerfile -t lethean-android .\n    # Create container\n    docker create -it --name lethean-android lethean-android bash\n    # Get binaries\n    docker cp lethean-android:/opt/android/lethean/build/release/bin .\n</code></pre>","title":"Android (using docker):"},{"location":"chain/build/openbsd/","text":"<p>This has been tested on OpenBSD 5.8.</p> <p>You will need to add a few packages to your system. <code>pkg_add db cmake gcc gcc-libs g++ miniupnpc gtest</code>.</p> <p>The doxygen and graphviz packages are optional and require the xbase set.</p> <p>The Boost package has a bug that will prevent librpc.a from building correctly. In order to fix this, you will have to Build boost yourself from scratch. Follow the directions here (under \"Building Boost\"): https://github.com/bitcoin/bitcoin/blob/master/doc/build-openbsd.md</p> <p>You will have to add the serialization, date_time, and regex modules to Boost when building as they are needed by Lethean.</p> <p>To build: <code>env CC=egcc CXX=eg++ CPP=ecpp DEVELOPER_LOCAL_TOOLS=1 BOOST_ROOT=/path/to/the/boost/you/built make release-static-64</code></p>","title":"OpenBSD:"},{"location":"chain/cli/lethean-blockchain-export/","text":"Bash<pre><code>./lethean-blockchain-export --help\n\nAllowed options:\n\nCommand line options:\n  --help                                Produce help message\n\nCommand line options and settings options:\n  --data-dir arg (=/Users/name/.intensecoin)\n                                        Specify data directory\n  --testnet-data-dir arg (=/Users/name/.intensecoin/testnet)\n                                        Specify testnet data directory\n  --output-file arg                     Specify output file\n  --testnet                             Run on testnet.\n  --log-level arg                       0-4 or categories\n  --database arg (=lmdb)                available: lmdb\n  --block-stop arg (=0)                 Stop at block number\n  --blocksdat                           Output in blocks.dat format\n</code></pre>","title":"Lethean blockchain export"},{"location":"chain/cli/lethean-blockchain-import/","text":"Bash<pre><code>./lethean-blockchain-import --help\n\nAllowed options:\n  --data-dir arg (=/Users/name/.intensecoin)\n                                        Specify data directory\n  --testnet-data-dir arg (=/Users/name/.intensecoin/testnet)\n                                        Specify testnet data directory\n  --test-drop-download                  For net tests: in download, discard ALL\n                                        blocks instead checking/saving them \n                                        (very fast)\n  --test-drop-download-height arg (=0)  Like test-drop-download but disards \n                                        only after around certain height\n  --testnet                             Run on testnet. The wallet must be \n                                        launched with --testnet flag.\n  --enforce-dns-checkpointing           checkpoints from DNS server will be \n                                        enforced\n  --prep-blocks-threads arg (=4)        Max number of threads to use when \n                                        preparing block hashes in groups.\n  --fast-block-sync arg (=1)            Sync up most of the way by using \n                                        embedded, known block hashes.\n  --show-time-stats arg (=0)            Show time-stats when processing \n                                        blocks/txs and disk synchronization.\n  --block-sync-size arg (=0)            How many blocks to sync at once during \n                                        chain synchronization (0 = adaptive).\n  --check-updates arg (=notify)         Check for new versions of monero: \n                                        [disabled|notify|download|update]\n  --fluffy-blocks                       Relay blocks as fluffy blocks where \n                                        possible (automatic on testnet)\n  --standard-json                       Force standard JSON output (do not \n                                        return binary data in json fields)\n  --testnet-p2p-bind-port arg (=38772)  Port for testnet p2p network protocol\n  --p2p-bind-port arg (=48772)          Port for p2p network protocol\n  --extra-messages-file arg             Specify file for extra messages to \n                                        include into coinbase transactions\n  --start-mining arg                    Specify wallet address to mining for\n  --mining-threads arg                  Specify mining threads count\n  --bg-mining-enable                    enable/disable background mining\n  --bg-mining-ignore-battery            if true, assumes plugged in when unable\n                                        to query system power status\n  --bg-mining-min-idle-interval arg     Specify min lookback interval in \n                                        seconds for determining idle state\n  --bg-mining-idle-threshold arg        Specify minimum avg idle percentage \n                                        over lookback interval\n  --bg-mining-miner-target arg          Specificy maximum percentage cpu use by\n                                        miner(s)\n  --db-type arg (=lmdb)                 Specify database type, available: lmdb\n  --db-sync-mode arg (=fast:async:1000) Specify sync option, using format \n                                        [safe|fast|fastest]:[sync|async]:[nbloc\n                                        ks_per_sync].\n  --db-salvage                          Try to salvage a blockchain database if\n                                        it seems corrupted\n\nCommand line options:\n  --count-blocks                        Count blocks in bootstrap file and exit\n  --pop-blocks arg (=0)                 Remove blocks from end of blockchain\n  --drop-hard-fork                      Drop hard fork subdbs\n  --help                                Produce help message\n\nCommand line options and settings options:\n  --input-file arg                      Specify input file\n  --log-level arg                       0-4 or categories\n  --database arg (=lmdb)                available: lmdb\n  --batch-size arg (=20000)\n  --block-stop arg (=0)                 Stop at block number\n  --verify arg (=1)                     Verify blocks and transactions during \n                                        import\n  --batch arg (=1)                      Batch transactions for faster import\n  --resume arg (=1)                     Resume from current height if output \n                                        database already exists\n</code></pre>","title":"Lethean blockchain import"},{"location":"chain/cli/lethean-wallet-rpc/","text":"Bash<pre><code>./lethean-wallet-rpc --help\nFailed to parse arguments: the option '--rpc-bind-port' is required but missing\n\nGeneral options:\n  --help                          Produce help message\n  --version                       Output version information\n\nWallet options:\n  --daemon-address arg            Use daemon instance at &lt;host&gt;:&lt;port&gt;\n  --daemon-host arg               Use daemon instance at host &lt;arg&gt; instead of \n                                  localhost\n  --password arg                  Wallet password (escape/quote as needed)\n  --password-file arg             Wallet password file\n  --daemon-port arg (=0)          Use daemon instance at port &lt;arg&gt; instead of \n                                  48782\n  --daemon-login arg              Specify username[:password] for daemon RPC \n                                  client\n  --testnet                       For testnet. Daemon must also be launched \n                                  with --testnet flag\n  --restricted-rpc                Restricts to view-only commands\n  --rpc-bind-port arg             Sets bind port for server\n  --disable-rpc-login             Disable HTTP authentication for RPC \n                                  connections served by this process\n  --trusted-daemon                Enable commands which rely on a trusted \n                                  daemon\n  --rpc-bind-ip arg (=127.0.0.1)  Specify ip to bind rpc server\n  --rpc-login arg                 Specify username[:password] required for RPC \n                                  server\n  --confirm-external-bind         Confirm rpc-bind-ip value is NOT a loopback \n                                  (local) IP\n  --wallet-file arg               Use wallet &lt;arg&gt;\n  --generate-from-json arg        Generate wallet from JSON format file\n  --wallet-dir arg                Directory for newly created wallets\n  --log-file arg                  Specify log file\n  --log-level arg                 0-4 or categories\n  --max-concurrency arg (=1)      Max number of threads to use for a parallel \n                                  job\n  --config-file arg               Config file\n</code></pre>","title":"Lethean wallet rpc"},{"location":"chain/cli/lethean-wallet-vpn-rpc/","text":"Bash<pre><code>/lethean-wallet-vpn-rpc --help\nFailed to parse arguments: the option '--vpn-rpc-bind-port' is required but missing\n\nGeneral options:\n  --help                          Produce help message\n  --version                       Output version information\n\nWallet options:\n  --daemon-address arg            Use daemon instance at &lt;host&gt;:&lt;port&gt;\n  --daemon-host arg               Use daemon instance at host &lt;arg&gt; instead of \n                                  localhost\n  --password arg                  Wallet password (escape/quote as needed)\n  --password-file arg             Wallet password file\n  --daemon-port arg (=0)          Use daemon instance at port &lt;arg&gt; instead of \n                                  48782\n  --daemon-login arg              Specify username[:password] for daemon RPC \n                                  client\n  --testnet                       For testnet. Daemon must also be launched \n                                  with --testnet flag\n  --restricted-rpc                Restricts to view-only commands\n  --vpn-rpc-bind-port arg         Sets bind port for VPN RPC server\n  --trusted-daemon                Enable commands which rely on a trusted \n                                  daemon\n  --rpc-bind-ip arg (=127.0.0.1)  Specify ip to bind rpc server\n  --rpc-login arg                 Specify username[:password] required for RPC \n                                  server\n  --confirm-external-bind         Confirm rpc-bind-ip value is NOT a loopback \n                                  (local) IP\n  --wallet-file arg               Use wallet &lt;arg&gt;\n  --generate-from-json arg        Generate wallet from JSON format file\n  --log-file arg                  Specify log file\n  --log-level arg                 0-4 or categories\n  --max-concurrency arg (=1)      Max number of threads to use for a parallel \n                                  job\n  --config-file arg               Config file\n</code></pre>","title":"Lethean wallet vpn rpc"},{"location":"chain/cli/letheand/","text":"Bash<pre><code>./letheand --help\n\nUsage: ./letheand [options|settings] [daemon_command...]\n\nOptions:\n  --help                                Produce help message\n  --version                             Output version information\n  --os-version                          OS for which this executable was \n                                        compiled\n  --config-file arg (=/Users/snider/.intensecoin/intensecoin.conf)\n                                        Specify configuration file\n  --test-dbg-lock-sleep arg (=0)        Sleep time in ms, defaults to 0 (off), \n                                        used to debug before/after locking \n                                        mutex. Values 100 to 1000 are good for \n                                        tests.\n  --detach                              Run as daemon\n  --pidfile arg                         File path to write the daemon's PID to \n                                        (optional, requires --detach)\n  --non-interactive                     Run non-interactive\n\nSettings:\n  --log-file arg (=/Users/snider/.intensecoin/intensecoin.log)\n                                        Specify log file\n  --log-level arg\n  --max-concurrency arg (=0)            Max number of threads to use for a \n                                        parallel job\n  --data-dir arg (=/Users/snider/.intensecoin)\n                                        Specify data directory\n  --testnet-data-dir arg (=/Users/snider/.intensecoin/testnet)\n                                        Specify testnet data directory\n  --test-drop-download                  For net tests: in download, discard ALL\n                                        blocks instead checking/saving them \n                                        (very fast)\n  --test-drop-download-height arg (=0)  Like test-drop-download but disards \n                                        only after around certain height\n  --testnet                             Run on testnet. The wallet must be \n                                        launched with --testnet flag.\n  --enforce-dns-checkpointing           checkpoints from DNS server will be \n                                        enforced\n  --prep-blocks-threads arg (=4)        Max number of threads to use when \n                                        preparing block hashes in groups.\n  --fast-block-sync arg (=1)            Sync up most of the way by using \n                                        embedded, known block hashes.\n  --show-time-stats arg (=0)            Show time-stats when processing \n                                        blocks/txs and disk synchronization.\n  --block-sync-size arg (=0)            How many blocks to sync at once during \n                                        chain synchronization (0 = adaptive).\n  --check-updates arg (=notify)         Check for new versions of monero: \n                                        [disabled|notify|download|update]\n  --fluffy-blocks                       Relay blocks as fluffy blocks where \n                                        possible (automatic on testnet)\n  --standard-json                       Force standard JSON output (do not \n                                        return binary data in json fields)\n  --testnet-p2p-bind-port arg (=38772)  Port for testnet p2p network protocol\n  --p2p-bind-port arg (=48772)          Port for p2p network protocol\n  --extra-messages-file arg             Specify file for extra messages to \n                                        include into coinbase transactions\n  --start-mining arg                    Specify wallet address to mining for\n  --mining-threads arg                  Specify mining threads count\n  --bg-mining-enable                    enable/disable background mining\n  --bg-mining-ignore-battery            if true, assumes plugged in when unable\n                                        to query system power status\n  --bg-mining-min-idle-interval arg     Specify min lookback interval in \n                                        seconds for determining idle state\n  --bg-mining-idle-threshold arg        Specify minimum avg idle percentage \n                                        over lookback interval\n  --bg-mining-miner-target arg          Specificy maximum percentage cpu use by\n                                        miner(s)\n  --db-type arg (=lmdb)                 Specify database type, available: lmdb\n  --db-sync-mode arg (=fast:async:1000) Specify sync option, using format \n                                        [safe|fast|fastest]:[sync|async]:[nbloc\n                                        ks_per_sync].\n  --db-salvage                          Try to salvage a blockchain database if\n                                        it seems corrupted\n  --p2p-bind-ip arg (=0.0.0.0)          Interface for p2p network protocol\n  --p2p-external-port arg (=0)          External port for p2p network protocol \n                                        (if port forwarding used with NAT)\n  --allow-local-ip                      Allow local ip add to peer list, mostly\n                                        in debug purposes\n  --add-peer arg                        Manually add peer to local peerlist\n  --add-priority-node arg               Specify list of peers to connect to and\n                                        attempt to keep the connection open\n  --add-exclusive-node arg              Specify list of peers to connect to \n                                        only. If this option is given the \n                                        options add-priority-node and seed-node\n                                        are ignored\n  --seed-node arg                       Connect to a node to retrieve peer \n                                        addresses, and disconnect\n  --hide-my-port                        Do not announce yourself as peerlist \n                                        candidate\n  --no-igd                              Disable UPnP port mapping\n  --offline                             Do not listen for peers, nor connect to\n                                        any\n  --out-peers arg (=-1)                 set max number of out peers\n  --tos-flag arg (=-1)                  set TOS flag\n  --limit-rate-up arg (=-1)             set limit-rate-up [kB/s]\n  --limit-rate-down arg (=-1)           set limit-rate-down [kB/s]\n  --limit-rate arg (=-1)                set limit-rate [kB/s]\n  --save-graph                          Save data for dr monero\n  --rpc-bind-port arg (=48782)          Port for RPC server\n  --testnet-rpc-bind-port arg (=38782)  Port for testnet RPC server\n  --restricted-rpc                      Restrict RPC to view only commands\n  --rpc-bind-ip arg (=127.0.0.1)        Specify ip to bind rpc server\n  --rpc-login arg                       Specify username[:password] required \n                                        for RPC server\n  --confirm-external-bind               Confirm rpc-bind-ip value is NOT a \n                                        loopback (local) IP\n</code></pre>","title":"Letheand"},{"location":"chain/install/apt-install/","text":"<p>If you want to run the Lethean wallet GUI on a supported distribution, you can use the official repository. Add to your apt sources as follows (you need to be have superuser previleges): Text Only<pre><code>echo 'deb [trusted=yes] http://download.lethean.io/repo/DISTRIBUTION/ ./' &gt;/etc/apt/sources.list.d/lethean.list\n</code></pre> currently supported DISTRIBUTION values:</p> Text Only<pre><code>Ubuntu: xenial, bionic\n\nDebian: stretch, buster\n</code></pre> <p>Then run: Text Only<pre><code>apt-get update\napt-get install lethean-gui\n</code></pre> This won't install any command line wallet tool. You can add the wallet cli by running the following command: Text Only<pre><code>apt-get install lethean-wallet-cli\n</code></pre> If you are running services on the lethean network, like in the case of an exchange, you may need the wallet rpc client as well: Text Only<pre><code>apt-get install lethean-wallet-rpc\n</code></pre> The lethean-wallet-vpn-rpc package is only needed if you want to run an exit node (i.e. provide vpn services through the lethean network and earn coins). In this case, it's easier to start by installing the lethean-vpn package instead, and follow the related guide on https://github.com/ronnylov/lethean-vpn/wiki/Full-Lethean-exit-node-install-guide</p>","title":"Ubuntu &amp; Debian"},{"location":"chain/install/linux/","text":"<p>(Tested on Ubuntu 16.04 x86, 16.10 x64, 18.04 x64, Gentoo x64 and Linux Mint 18 \"Sarah\" - Cinnamon x64)</p> <ol> <li> <p>Install Lethean dependencies</p> </li> <li> <p>For Ubuntu and Mint</p> <p><code>sudo apt install build-essential cmake libboost-all-dev miniupnpc libunbound-dev graphviz doxygen libunwind8-dev pkg-config libssl-dev</code></p> </li> <li> <p>For Debian 9</p> <p><code>sudo apt install build-essential cmake libboost-all-dev miniupnpc libunbound-dev graphviz doxygen libunwind8-dev pkg-config libssl1.0-dev</code></p> </li> <li> <p>For Gentoo</p> <p><code>sudo emerge app-arch/xz-utils app-doc/doxygen dev-cpp/gtest dev-libs/boost dev-libs/expat dev-libs/openssl dev-util/cmake media-gfx/graphviz net-dns/unbound net-libs/ldns net-libs/miniupnpc sys-libs/libunwind</code></p> </li> <li> <p>Grab an up-to-date copy of the lethean-gui repository</p> <p><code>git clone https://github.com/LetheanMovement/lethean-gui</code></p> </li> <li> <p>Go into the repository</p> <p><code>cd lethean-gui</code></p> </li> <li> <p>Install the GUI dependencies</p> </li> <li> <p>For Ubuntu 16.04 x86</p> <p><code>sudo apt-get install qtbase5-dev qt5-default qtdeclarative5-dev qml-module-qtquick-controls qml-module-qtquick-xmllistmodel qttools5-dev-tools qml-module-qtquick-dialogs</code></p> </li> <li> <p>For Ubuntu 16.04+ x64</p> <p><code>sudo apt-get install qtbase5-dev qt5-default qtdeclarative5-dev qml-module-qtquick-controls qml-module-qtquick-xmllistmodel qttools5-dev-tools qml-module-qtquick-dialogs qml-module-qt-labs-settings libqt5qml-graphicaleffects</code></p> </li> <li> <p>For Ubuntu 17.10+ x64   <code>sudo apt-get install qtbase5-dev qt5-default qtdeclarative5-dev qml-module-qtquick-controls qml-module-qtquick-xmllistmodel qttools5-dev-tools qml-module-qtquick-dialogs qml-module-qt-labs-settings qml-module-qtgraphicaleffects</code></p> </li> <li> <p>For Ubuntu 18.04+ x64   <code>sudo apt-get install qtbase5-dev qt5-default qtdeclarative5-dev qml-module-qtquick-controls qml-module-qtquick-xmllistmodel qttools5-dev-tools qml-module-qtquick-dialogs qml-module-qt-labs-settings qml-module-qtgraphicaleffects qml-module-qt-labs-folderlistmodel</code></p> </li> <li> <p>For Debian 9+   <code>sudo apt-get install qml-module-qtquick-controls qml-module-qtquick-xmllistmodel qml-module-qtquick-window2 qml-module-qtquick-dialogs qml-module-qt-labs-settings qml-module-qt-labs-folderlistmodel qml-module-qtgraphicaleffects</code></p> </li> <li> <p>For Linux Mint 18 \"Sarah\" - Cinnamon x64</p> <p><code>sudo apt install qml-module-qt-labs-settings qml-module-qtgraphicaleffects</code></p> </li> <li> <p>For Gentoo</p> <p><code>sudo emerge dev-qt/qtcore:5 dev-qt/qtdeclarative:5 dev-qt/qtquickcontrols:5 dev-qt/qtquickcontrols2:5 dev-qt/qtgraphicaleffects:5</code></p> </li> <li> <p>Optional : To build the flag <code>WITH_SCANNER</code></p> <ul> <li>For Ubuntu and Mint</li> </ul> <p><code>sudo apt install qtmultimedia5-dev qml-module-qtmultimedia libzbar-dev</code></p> <ul> <li>For Gentoo</li> </ul> <p>The qml USE flag must be enabled.</p> <p><code>emerge dev-qt/qtmultimedia:5 media-gfx/zbar</code></p> </li> <li> <p>Build the GUI</p> </li> <li> <p>For Ubuntu and Mint</p> <p><code>./build.sh</code></p> </li> <li> <p>For Gentoo</p> <p><code>QT_SELECT=5 ./build.sh</code></p> </li> </ol> <p>The executable can be found in the build/release/bin folder.</p>","title":"Linux:"},{"location":"chain/install/macos/","text":"<ol> <li>Install Xcode from AppStore</li> <li>Install homebrew</li> <li>Install lethean-gui dependencies:</li> </ol> <p><code>brew install boost --c++11</code></p> <p><code>brew install openssl</code> - to install openssl headers</p> <p><code>brew install pkgconfig</code></p> <p><code>brew install cmake</code></p> <p><code>brew install qt5</code>  (or download QT 5.8+ from qt.io)</p> <p>If you have an older version of Qt installed via homebrew, you can force it to use 5.x like so:</p> <p><code>brew link --force --overwrite qt5</code></p> <ol> <li> <p>Add the Qt bin directory to your path</p> <p>Example: <code>export PATH=$PATH:$HOME/Qt/5.8/clang_64/bin</code></p> <p>This is the directory where Qt 5.x is installed on your system</p> </li> <li> <p>Grab an up-to-date copy of the lethean-gui repository</p> </li> </ol> <p><code>git clone https://github.com/LetheanMovement/lethean-gui.git</code></p> <ol> <li>Go into the repository</li> </ol> <p><code>cd lethean-gui</code></p> <ol> <li>Start the build</li> </ol> <p><code>./build.sh</code></p> <p>The executable can be found in the <code>build/release/bin</code> folder.</p> <p>Note: Workaround for \"ERROR: Xcode not set up properly\"</p> <p>Edit <code>$HOME/Qt/5.8/clang_64/mkspecs/features/mac/default_pre.prf</code></p> <p>replace <code>isEmpty($$list($$system(\"/usr/bin/xcrun -find xcrun 2&gt;/dev/null\")))</code></p> <p>with <code>isEmpty($$list($$system(\"/usr/bin/xcrun -find xcodebuild 2&gt;/dev/null\")))</code></p> <p>More info: http://stackoverflow.com/a/35098040/1683164</p>","title":"OS X:"},{"location":"chain/install/windows/","text":"<ol> <li> <p>Install msys2, follow the instructions on that page on how to update packages to the latest versions</p> </li> <li> <p>Install Lethean dependencies as described in Lethean documentation into msys2 environment    As we only build application for x86, install only dependencies for x86 architecture (i686 in package name) Text Only<pre><code>pacman -S mingw-w64-i686-toolchain make mingw-w64-i686-cmake mingw-w64-i686-boost\n</code></pre></p> </li> <li> <p>Install git into msys2 environment</p> Text Only<pre><code>pacman -S git\n</code></pre> </li> <li> <p>Install Qt5 from official site</p> </li> <li>download unified installer, run and select following options:<ul> <li>Qt &gt; Qt 5.7 &gt; MinGW 5.3.0 32 bit</li> <li>Tools &gt; MinGW 5.3.0</li> </ul> </li> <li> <p>continue with installation</p> </li> <li> <p>Open <code>MinGW-w64 Win32 Shell</code> shell</p> </li> </ol> <p><code>%MSYS_ROOT%\\msys2_shell.cmd -mingw32</code></p> <p>Where <code>%MSYS_ROOT%</code> will be <code>c:\\msys32</code> if your host OS is x86-based or <code>c:\\msys64</code> if your host OS    is x64-based</p> <ol> <li> <p>Install the latest version of boost, specificly the required static libraries     Text Only<pre><code>cd\nwget http://sourceforge.net/projects/boost/files/boost/1.63.0/boost_1_63_0.tar.bz2\ntar xjf boost_1_63_0.tar.bz2\ncd boost_1_63_0\n./bootstrap.sh mingw\n./b2 --prefix=/mingw32/boost --layout=tagged --without-mpi --without-python toolset=gcc address-model=32 variant=debug,release link=static threading=multi runtime-link=static -j$(nproc) install\n</code></pre></p> </li> <li> <p>Clone repository     Text Only<pre><code>cd\ngit clone https://github.com/LetheanMovement/lethean-gui.git\n</code></pre></p> </li> <li> <p>Build the GUI     Text Only<pre><code>cd lethean-gui\nexport PATH=$(ls -rd /c/Qt/5.[6,7,8]/mingw53_32/bin | head -1):$PATH\n./build.sh\ncd build\nmake deploy\n</code></pre></p> </li> </ol> <p>The executable can be found in the <code>.\\release\\bin</code> directory.</p>","title":"Windows:"},{"location":"chain/testnet/docker/","text":"<p>Run local testnet node</p> <p><code>docker run -it -p 38772  --name chain-test  lthn/chain:testnet</code></p> <p>Run local production node</p> <p><code>docker run -it -p 48772  --name chain-prod  lthn/chain:latest</code></p>","title":"Docker"},{"location":"how-to/use-boost-1.58-again/","text":"","title":"Use Boost 1.58 Again"},{"location":"how-to/use-boost-1.58-again/#ubuntu","text":"<p>There is a ppa you can use to get boost 1.58.</p> <p>https://launchpad.net/~kzemek/+archive/ubuntu/boost</p> Text Only<pre><code>add-apt-repository ppa:kzemek/boost -y\napt-get update\napt-get install boost1.58\n</code></pre>","title":"Ubuntu"},{"location":"services/filesystem/","text":"<p>Lethean creates a folder in a users home directory called <code>Lethean</code>,  we don't use hidden folders meaning the default chain data has moved from <code>$HOME/.lethean/data/lmdb</code> &gt; <code>$HOME/Lethean/data/lmdb</code> </p> <p>Within the lethean folder space these locations are utilised - <code>cli</code> - Lethean Blockchain executables - <code>conf</code>- Application &amp; executable conf - <code>data</code> - Application data location - <code>users</code> - OpenPGP User accounts - <code>wallets</code> - Wallet files</p>","title":"Filesystem Access"},{"location":"services/filesystem/#api-endpoints","text":"<p>All paths are relative to $HOME/Lethean/*</p> <ul> <li><code>POST https://localhost:36911/filesystem/read {path: \"\"}</code></li> <li><code>POST https://localhost:36911/filesystem/write {path: \"\", \"data\":\"base64_string\"}</code></li> <li><code>POST https://localhost:36911/filesystem/list {path: \"\"}</code></li> </ul>","title":"API Endpoints"},{"location":"services/wallet/","text":"<p>Service API Doc: WalletService</p> <p>Json RPC Passthrough: lethean-wallet-rpc</p> <p>Access with Angular DI</p> <p><code>contructor(private wallet: WalletService)</code></p>","title":"Wallet RPC"},{"location":"services/wallet/#methods","text":"<ul> <li>startWallet</li> <li>restoreWallet</li> <li>openWallet</li> <li>getBalance</li> <li>getWalletList (check filesystem)</li> <li>walletList (no fs check)</li> <li>loadTransfers</li> </ul>","title":"Methods"}]}